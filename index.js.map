{"version":3,"sources":["../src/index.js"],"names":["events","ACCOUNTS_TRIGGER","SYNC_STATUS_SYNCING","SYNC_STATUS_SYNCED","AppProxyHandler","get","target","name","receiver","params","rpc","sendAndObserveResponse","pipe","decorateAppWithIcons","icons","app","icon","size","src","AppProxy","constructor","provider","Messenger","accounts","sendAndObserveResponses","network","currentApp","installedApps","apps","map","getApps","identify","identifier","send","path","requestPath","resolveAddressIdentity","address","requestAddressIdentityModification","searchIdentities","searchTerm","call","method","describeScript","script","describeTransaction","transaction","options","pastEvents","external","jsonInterface","eventsInterface","filter","item","type","contract","callMethods","constant","forEach","methodJsonDescription","intentMethods","requestSignMessage","message","web3Eth","cache","key","value","getCache","state","store","reducer","externals","init","CACHED_STATE_KEY","BLOCK_REORG_MARGIN","wrappedReducer","event","Promise","resolve","err","console","error","getCurrentEvents","fromBlock","getForwardedActions","frontendTriggers","getPastEvents","cachedFromBlock","toBlock","initializationBlock","returnValues","from","to","cacheValue$","v","latestBlock$","initState$","initialState","initState","store$","cacheValue","latestBlock","cachedState","block","cachedBlock","initialStoreState","pastEventsToBlock","Math","max","undefined","asyncScheduler","leading","trailing","pastState","accounts$","account","currentEvents$","connect","trigger","eventName","registerAppMetadata","blockNumber","dataId","cid","getAppMetadata","queryAppMetadata","newForwardedAction","actionId","evmScript","updateForwardedAction","status","AragonApp","providers","MessagePortMessage","Proxy"],"mappings":"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","sourcesContent":["import { asyncScheduler, forkJoin, from, merge } from 'rxjs'\nimport {\n  catchError,\n  delayWhen,\n  endWith,\n  flatMap,\n  map,\n  mergeScan,\n  last,\n  pluck,\n  publishReplay,\n  startWith,\n  switchMap,\n  throttleTime\n} from 'rxjs/operators'\nimport Messenger, { providers } from '@aragon/rpc-messenger'\nimport { debug, getIconBySize } from './utils'\n\nexport const events = {\n  ACCOUNTS_TRIGGER: 'ACCOUNTS_TRIGGER',\n  SYNC_STATUS_SYNCING: 'SYNC_STATUS_SYNCING',\n  SYNC_STATUS_SYNCED: 'SYNC_STATUS_SYNCED'\n}\n\nexport const AppProxyHandler = {\n  get (target, name, receiver) {\n    if (name in target) {\n      return target[name]\n    }\n\n    return function (...params) {\n      return target.rpc.sendAndObserveResponse(\n        'intent',\n        [name, ...params]\n      ).pipe(\n        pluck('result')\n      )\n    }\n  }\n}\n\nfunction decorateAppWithIcons ({ icons = [], ...app }) {\n  app.icon = (size = -1) => {\n    const icon = getIconBySize(icons, size)\n    if (icon && icon.src) {\n      return icon.src\n    }\n  }\n  return app\n}\n\n/**\n * A JavaScript proxy that wraps RPC calls to the wrapper.\n */\nexport class AppProxy {\n  constructor (provider) {\n    this.rpc = new Messenger(provider)\n  }\n\n  /**\n   * Get an array of the accounts the user currently controls over time.\n   *\n   * @return {Observable} Multi-emission Observable that emits an array of account addresses every time a change is detected.\n   */\n  accounts () {\n    return this.rpc.sendAndObserveResponses(\n      'accounts'\n    ).pipe(\n      pluck('result')\n    )\n  }\n\n  /**\n   * Get the network the app is connected to over time.\n   *\n   * @return {Observable} Multi-emission Observable that emits an object with the connected network's id and type every time the network changes.\n   */\n  network () {\n    return this.rpc.sendAndObserveResponses(\n      'network'\n    ).pipe(\n      pluck('result')\n    )\n  }\n\n  /**\n   * Get this app's information.\n   *\n   * @return {Observable} Single-emission Observable that emits the current app's information.\n   */\n  currentApp () {\n    // Note that we don't use an observe here as the currently running app should never have its\n    // internal details (e.g. proxy address, kernel address) and external details (e.g. ABI, name,\n    // description, etc.) change during run time.\n    //\n    // If these details ever change, the app should instead be restarted from the client running the\n    // app.\n    return this.rpc.sendAndObserveResponse(\n      'get_apps',\n      ['get', 'current']\n    ).pipe(\n      pluck('result'),\n      map(decorateAppWithIcons)\n    )\n  }\n\n  /**\n   * Get an array of the installed apps on the Kernel (organization) this app is attached to.\n   *\n   * @return {Observable} Multi-emission Observable that emits an array of installed Aragon apps on the Kernel every time a change is detected.\n   */\n  installedApps () {\n    return this.rpc.sendAndObserveResponses(\n      'get_apps',\n      ['observe', 'all']\n    ).pipe(\n      pluck('result'),\n      map((apps) => apps.map(decorateAppWithIcons))\n    )\n  }\n\n  /**\n   * DEPRECATED\n   * Get all installed apps on the Kernel\n   *\n   * @return {Observable} Multi-emission Observable that emits an array of installed Aragon apps on the Kernel every time a change is detected.\n   *\n   */\n  getApps () {\n    return this.rpc.sendAndObserveResponses(\n      'get_apps',\n      []\n    ).pipe(\n      pluck('result')\n    )\n  }\n\n  /**\n   * Set the app identifier.\n   *\n   * This identifier is used to distinguish multiple instances of your app,\n   * so choose something that provides additional context to the app instance.\n   *\n   * Examples include: the name of a token that the app manages,\n   * the type of content that a TCR is curating, the name of a group etc.\n   *\n   * @param  {string} identifier The identifier of the app.\n   * @return {void}\n   */\n  identify (identifier) {\n    this.rpc.send(\n      'identify',\n      [identifier]\n    )\n  }\n\n  /**\n   * Get current path for the app. Useful for in-app routing and navigation.\n   *\n   * @return {Observable} Multi-emission Observable that emits the app's current path every time a change is detected.\n   */\n  path () {\n    return this.rpc.sendAndObserveResponses(\n      'path',\n      ['observe']\n    ).pipe(\n      pluck('result')\n    )\n  }\n\n  /**\n   * Request a new path.\n   *\n   * @return {Observable} Single-emission Observable that emits if the path request succeeded and errors if rejected\n   */\n  requestPath (path) {\n    return this.rpc.sendAndObserveResponse(\n      'path',\n      ['modify', path]\n    ).pipe(\n      pluck('result')\n    )\n  }\n\n  /**\n   * Resolve an address' identity, using the highest priority provider.\n   *\n   * @param  {string} address Address to resolve.\n   * @return {Observable} Single-emission Observable that emits the resolved identity or null if not found\n   */\n  resolveAddressIdentity (address) {\n    return this.rpc.sendAndObserveResponse(\n      'address_identity',\n      ['resolve', address]\n    ).pipe(\n      pluck('result')\n    )\n  }\n\n  /**\n   * Request an address' identity be modified with the highest priority provider.\n   *\n   * The request is typically handled by the aragon client.\n   *\n   * @param  {string} address Address to modify.\n   * @return {Observable} Single-emission Observable that emits if the modification succeeded and errors if cancelled by the user\n   */\n  requestAddressIdentityModification (address) {\n    return this.rpc.sendAndObserveResponse(\n      'address_identity',\n      ['modify', address]\n    ).pipe(\n      pluck('result')\n    )\n  }\n\n  /**\n   * Search for identities that match a given search term.\n   *\n   * The request is typically handled by the Aragon client.\n   *\n   * @param  {string} searchTerm Search string\n   * @return {Observable} Single-emission Observable that emits with an array of any matching identities\n   */\n  searchIdentities (searchTerm) {\n    return this.rpc.sendAndObserveResponse(\n      'search_identities',\n      [searchTerm]\n    ).pipe(\n      pluck('result')\n    )\n  }\n\n  /**\n   * Perform a read-only call on the app's smart contract.\n   *\n   * @param  {string} method The name of the method to call.\n   * @param  {...*} params An optional variadic number of parameters. The last parameter can be the call options (optional). See the [web3.js doc](https://web3js.readthedocs.io/en/1.0/web3-eth-contract.html#id16) for more details.\n   * @return {Observable} Single-emission Observable that emits the result of the call.\n   */\n  call (method, ...params) {\n    return this.rpc.sendAndObserveResponse(\n      'call',\n      [method, ...params]\n    ).pipe(\n      pluck('result')\n    )\n  }\n\n  /**\n   * Decodes an EVM callscript and tries to describe the transaction path that the script encodes.\n   *\n   * @param  {string} script The EVM callscript to describe\n   * @return {Observable} Single-emission Observable that emits the described transaction path. The emitted transaction path is an array of objects, where each item has a `destination`, `data` and `description` key.\n   */\n  describeScript (script) {\n    return this.rpc.sendAndObserveResponse(\n      'describe_script',\n      [script]\n    ).pipe(\n      pluck('result')\n    )\n  }\n\n  /**\n   * Try to describe a transaction based on its input data.\n   *\n   * @param  {Object} transaction Transaction object\n   * @param  {string} transaction.data Transaction's bytes data\n   * @param  {string} transaction.to Transaction's to address\n   * @return {Observable} Single-emission Observable that emits the transaction's description, if describable. The result is an object holding a string `description` and an array of objects as `annotatedDescription`.\n   */\n  describeTransaction (transaction) {\n    return this.rpc.sendAndObserveResponse(\n      'describe_transaction',\n      [transaction]\n    ).pipe(\n      pluck('result')\n    )\n  }\n\n  /**\n   * Subscribe for events on your app's smart contract\n   *\n   * @param  {object} [options] web3.eth.Contract.events()' options\n   *   Unless explicitly provided, fromBlock is always defaulted to this app's initializationBlock\n   * @return {Observable} Multi-emission Observable that emits [Web3 events](https://web3js.readthedocs.io/en/1.0/glossary.html#specification).\n   */\n  events (options = {}) {\n    return this.rpc.sendAndObserveResponses(\n      'events',\n      ['allEvents', options]\n    ).pipe(\n      pluck('result')\n    )\n  }\n\n  /**\n   * Fetch events from past blocks on your app's smart contract.\n   *\n   * @param  {object} [options] web3.eth.Contract.events()' options\n   *   Unless explicitly provided, fromBlock is always defaulted to this app's initializationBlock\n   * @return {Observable} Single-emission Observable that emits an array of [Web3 events](https://web3js.readthedocs.io/en/1.0/glossary.html#specification).\n   */\n  pastEvents (options = {}) {\n    return this.rpc.sendAndObserveResponse(\n      'past_events',\n      ['allEvents', options]\n    ).pipe(\n      pluck('result')\n    )\n  }\n\n  /**\n   * Creates a handle to interact with an external contract\n   * (i.e. a contract that is **not** your app's smart contract, such as a token).\n   *\n   * @param  {string} address The address of the external contract\n   * @param  {Array<Object>} jsonInterface The [JSON interface](https://solidity.readthedocs.io/en/latest/abi-spec.html#abi-json) of the external contract.\n   * @return {Object}  An external smart contract handle, containing the following methods:\n   *   - `events(options)`: subscribe for events on the external contract, returns a multi-emission Observable that emits events\n   *   - `pastEvents(options)`: fetch events from past blocks on the external contract, returns a single-emission Observable with an array of past events\n   *   - Calling any other method on the handle will send a call or an external intent to the smart contract and return a single-emission Observable with the result\n   */\n  external (address, jsonInterface) {\n    const eventsInterface = jsonInterface.filter((item) => item.type === 'event')\n\n    const contract = {\n      events: (options = {}) => {\n        return this.rpc.sendAndObserveResponses(\n          'external_events',\n          [address, eventsInterface, 'allEvents', options]\n        ).pipe(\n          pluck('result')\n        )\n      },\n      pastEvents: (options = {}) => {\n        return this.rpc.sendAndObserveResponse(\n          'external_past_events',\n          [address, eventsInterface, 'allEvents', options]\n        ).pipe(\n          pluck('result')\n        )\n      }\n    }\n\n    // Bind calls\n    const callMethods = jsonInterface.filter(\n      (item) => item.type === 'function' && item.constant\n    )\n    callMethods.forEach((methodJsonDescription) => {\n      contract[methodJsonDescription.name] = (...params) => {\n        return this.rpc.sendAndObserveResponse(\n          'external_call',\n          [address, methodJsonDescription, ...params]\n        ).pipe(\n          pluck('result')\n        )\n      }\n    })\n\n    // Bind non-call (ie. \"write\") methods for external intents\n    const intentMethods = jsonInterface.filter(\n      (item) => item.type === 'function' && !item.constant\n    )\n    intentMethods.forEach((methodJsonDescription) => {\n      contract[methodJsonDescription.name] = (...params) => {\n        return this.rpc.sendAndObserveResponse(\n          'external_intent',\n          [address, methodJsonDescription, ...params]\n        ).pipe(\n          pluck('result')\n        )\n      }\n    })\n\n    return contract\n  }\n\n  /**\n   * Allow apps to sign arbitrary data via a RPC call\n   *\n   * @param  {string} message The message to sign\n   * @return {void}\n   */\n  requestSignMessage (message) {\n    return this.rpc\n      .sendAndObserveResponse('sign_message', [message])\n      .pipe(\n        pluck('result')\n      )\n  }\n\n  /**\n   * Invoke a whitelisted web3.eth function.\n   *\n   * @param  {string} method The method to call. Must be in the whitelisted group (mostly getters).\n   * @param  {...*} params Parameters for the call\n   * @return {Observable} Single-emission Observable that emits the return value of the call.\n   */\n  web3Eth (method, ...params) {\n    return this.rpc.sendAndObserveResponse(\n      'web3_eth',\n      [method, ...params]\n    ).pipe(\n      pluck('result')\n    )\n  }\n\n  /**\n   * Set a value in the application cache.\n   *\n   * @param  {string} key The cache key to set a value for\n   * @param  {string} value The value to persist in the cache\n   * @return {string} Single-emission Observable that emits when the cache operation has been committed\n   */\n  cache (key, value) {\n    return this.rpc.sendAndObserveResponse(\n      'cache',\n      ['set', key, value]\n    ).pipe(\n      pluck('result')\n    )\n  }\n\n  /**\n   * Get a value from the application cache.\n   *\n   * @param  {string} key The cache key to get a value for\n   * @return {Observable} Single-emission Observable with the value for the specified cache key\n   */\n  getCache (key) {\n    return this.rpc.sendAndObserveResponse(\n      'cache',\n      ['get', key]\n    ).pipe(\n      pluck('result')\n    )\n  }\n\n  /**\n   * Observe the cached application state over time.\n   *\n   * This method is also used to share state between the background script and front-end of your application.\n   *\n   * @return {Observable} Multi-emission Observable that emits the application state every time it changes. The type of the emitted values is application specific.\n   */\n  state () {\n    return this.rpc.sendAndObserveResponses(\n      'cache',\n      ['observe', 'state']\n    ).pipe(\n      pluck('result')\n    )\n  }\n\n  /**\n   * Application store constructor to be used in app script\n   * Listens for events, passes them through `reducer`, caches the resulting state and re-emits that state for easy chaining.\n   * Caches results to the `state` key to emit the new state for `api.state()` subscribers (e.g. a frontend).\n   *\n   * For caching purposes the event fetching is split into two steps:\n   *  - Fetching past events with `pastEvents`\n   *  - Subscribing to new events\n   *\n   * The reducer takes the signature `(state, event)` and should return either:\n   *  - a promise that resolves to state, even if it is unaltered by the event.\n   *  - a new state object\n   *\n   * Also note that the initial state is always `null`, not `undefined`, because of [JSONRPC](https://www.jsonrpc.org/specification) limitations.\n   *\n   * Optionally takes an options object with:\n   *   - `externals`: an array of external contracts to merge with this app's events,\n   *     for example you might use an external contract's Web3 events\n   *   - `init`: an initialization function run before events are passed through to the reducer,\n   *     useful for refreshing stale state from the contract (e.g. token balances)\n   *\n   * @param  {Function} reducer A function that reduces events to state. Can return a Promise that resolves to a new state.\n   * @param  {Object} [options] An optional options object\n   * @param  {Array.<{contract: Object, initializationBlock: String}>} [options.externals] An optional array of objects containing `contract` (as returned from `api.external`) and an optional `initializationBlock` from which to fetch events\n   * @param  {Function} [options.init] An optional initialization function for the state. Should return a promise that resolves to the init state.\n   * @return {Observable} Multi-emission Observable that emits the application state every time it changes. The type of the emitted values is application specific.\n   */\n  store (reducer, { externals = [], init } = {}) {\n    const CACHED_STATE_KEY = 'CACHED_STATE_KEY'\n    const BLOCK_REORG_MARGIN = 100\n\n    // Wrap the reducer in another reducer that allows us to execute code asynchronously\n    // in our reducer (due to the Promise wrapping). That's a lot of reducing.\n    //\n    // This is why we need the `mergeScan` operator below.\n    const wrappedReducer = (state, event) =>\n      from(\n        // Ensure a promise is returned even if the reducer returns an array or throws\n        new Promise((resolve) => resolve(reducer(state, event)))\n      ).pipe(\n        catchError((err) => {\n          console.error('Error from app reducer on event', err)\n          console.error('Current event', event)\n          console.error('Current state', state)\n          // Re-throw the error to stop the rest of the store() stream\n          throw err\n        })\n      )\n\n    const getCurrentEvents = (fromBlock) => merge(\n      this.events({ fromBlock }),\n      ...externals.map(({ contract }) => contract.events({ fromBlock })),\n      this.getForwardedActions(),\n      this.frontendTriggers()\n    )\n\n    // If `cachedFromBlock` is null there's no cache, `pastEvents` will use the initializationBlock\n    // External contracts can specify their own `initializationBlock` which will be used in case the cache is empty,\n    // by default they will use the current app's initialization block.\n    const getPastEvents = (cachedFromBlock, toBlock) => merge(\n      this.pastEvents({ fromBlock: cachedFromBlock, toBlock }),\n      ...externals.map(\n        ({ contract, initializationBlock }) =>\n          contract.pastEvents({ fromBlock: cachedFromBlock || initializationBlock, toBlock })\n      )\n    ).pipe(\n      // single emission array of all pastEvents -> flatten to process events\n      flatMap(pastEvents => from(pastEvents)),\n      startWith({\n        event: events.SYNC_STATUS_SYNCING,\n        returnValues: {\n          from: cachedFromBlock,\n          to: toBlock\n        }\n      }),\n      endWith({\n        event: events.SYNC_STATUS_SYNCED,\n        returnValues: {}\n      })\n    )\n    const cacheValue$ = this.getCache(CACHED_STATE_KEY).pipe(\n      // ensure we always get at least an empty object instead of falsy\n      map(v => v || {}))\n    const latestBlock$ = this.web3Eth('getBlockNumber')\n    // init the app state with the cached state\n    const initState$ = init\n      ? cacheValue$.pipe(\n        switchMap(({ state }) => {\n          // Make sure `init()` gets a new copy of the cached state so that it doesn't\n          // accidentally manipulate the observable's object\n          const initialState = state ? { ...state } : null\n          return from(init(initialState))\n        }),\n        delayWhen((initState) => {\n          debug('- store - init state:', initState)\n          return this.cache('state', initState)\n        })\n      )\n      : from([null])\n\n    const store$ = forkJoin(cacheValue$, initState$, latestBlock$).pipe(\n      switchMap(([cacheValue, initState, latestBlock]) => {\n        const { state: cachedState, block: cachedBlock } = cacheValue\n        const initialStoreState = (init ? initState : cachedState) || null\n        debug('- store - initial store state', initialStoreState)\n        debug(`- store - cachedBlock ${cachedBlock} | latestBlock: ${latestBlock}`)\n\n        // The block up to which to fetch past events.\n        // The reduced state up to this point will be cached on every load\n        const pastEventsToBlock = Math.max(0, latestBlock - BLOCK_REORG_MARGIN)\n\n        if (cachedBlock !== undefined) {\n          debug(`- store - pastEvents: block ${cachedBlock} -> ${pastEventsToBlock} (${pastEventsToBlock - cachedBlock} blocks)`)\n        } else {\n          debug(`- store - pastEvents: initialization block -> ${pastEventsToBlock} (up to ${pastEventsToBlock} blocks)`)\n        }\n        debug(`- store - currentEvents$: block ${pastEventsToBlock} -> future`)\n\n        return getPastEvents(cachedBlock, pastEventsToBlock).pipe(\n          mergeScan(wrappedReducer, initialStoreState, 1),\n          // throttle to reduce rendering and caching overthead\n          // must keep trailing to avoid discarded events\n          throttleTime(1000, asyncScheduler, { leading: false, trailing: true }),\n          delayWhen((state) => {\n            debug('- store - reduced state from past event:', state)\n            return this.cache('state', state)\n          }),\n          last(),\n          delayWhen((state) => {\n            debug('caching state:', state)\n            return this.cache(CACHED_STATE_KEY, {\n              block: pastEventsToBlock,\n              state\n            })\n          }),\n          switchMap(pastState => {\n            // observable which emits an web3.js event-like object with the address of the active account.\n            const accounts$ = this.accounts().pipe(\n              map(accounts => {\n                return {\n                  event: events.ACCOUNTS_TRIGGER,\n                  returnValues: {\n                    account: accounts[0]\n                  }\n                }\n              })\n            )\n            // fetch current events from block after cached block\n            const currentEvents$ = getCurrentEvents(pastEventsToBlock + 1)\n\n            return merge(currentEvents$, accounts$).pipe(\n              mergeScan(wrappedReducer, pastState, 1)\n            )\n          }),\n          // throttle to reduce rendering and caching overthead\n          // must keep trailing to avoid discarded events\n          throttleTime(250, asyncScheduler, { leading: false, trailing: true }),\n          delayWhen((state) => {\n            debug('- store - reduced state:', state)\n            return this.cache('state', state)\n          })\n        )\n      }),\n      publishReplay(1)\n    )\n    store$.connect()\n\n    return store$\n  }\n\n  /**\n   *\n   * Trigger an event handler in the application's store\n   *\n   * @param {string} eventName The name of the event to be handled in the reducer\n   * @param {Object} [returnValues={}] Optional event data\n   */\n  trigger (eventName, returnValues = {}) {\n    return this.rpc.send(\n      'trigger',\n      [eventName, returnValues]\n    )\n  }\n\n  /**\n   * subscribe to an observable that emits events created by the frontend event triggers\n   */\n  frontendTriggers () {\n    return this.rpc.sendAndObserveResponses(\n      'getTriggers'\n    ).pipe(\n      pluck('result')\n    )\n  }\n\n  /**\n   * Register data for external apps\n   *\n   * @param {string} blockNumber blockNumber that corresponds with the state update\n   * @param {string} dataId internal ID assigned to the data by the originator\n   * @param {string} cid external identifier (e.g., IPFS hash)\n   * @param {<Array>string} to Optional list of addresses of the applications allowed access to the data, defaults to '*'\n   * @return {void}\n   */\n  registerAppMetadata (blockNumber, dataId, cid, to = ['*']) {\n    return this.rpc.send(\n      'register_app_metadata',\n      [blockNumber, dataId, cid, to]\n    )\n  }\n\n  /**\n   * Subscribe to data from other apps\n   * @return {Observable} An [RxJS observable](http://reactivex.io/rxjs/class/es6/Observable.js~Observable.html) that emits an array of objects containing data from external apps\n   */\n  getAppMetadata () {\n    return this.rpc.sendAndObserveResponses(\n      'get_app_metadata'\n    ).pipe(pluck('result'))\n  }\n\n  /**\n   * Obtain a specific metadata entry\n   * @param {string} from Address of the application generating the data\n   * @param {string} dataId internal ID assigned to the data by the originator\n   * @return {Observable} A single-emission [RxJS observable](http://reactivex.io/rxjs/class/es6/Observable.js~Observable.html) that emits an object containing the requested metata or `undefined` if no matching entry is found\n   */\n  queryAppMetadata (from, dataId) {\n    return this.rpc.sendAndObserveResponse(\n      'query_app_metadata',\n      [from, dataId]\n    ).pipe(pluck('result'))\n  }\n\n  /**\n   * Register a new forwarded action\n   *\n   * @param {string} actionId ID assigned to forwarded action in Forwarder\n   * @param {string} blockNumber The number of the block from which this event was emitted\n   * @param {string} evmScript The execution script caught by the Forwarder\n   * @return {void}\n   */\n  newForwardedAction (actionId, blockNumber, evmScript) {\n    return this.rpc.send(\n      'update_forwarded_action',\n      [actionId, blockNumber, evmScript]\n    )\n  }\n\n  /**\n   * Update the state of a forwarded action\n   *\n   * If the execution is pending, status = 'pending'\n   * If the execution completed, status = 'completed'\n   * If the execution failed, status = 'failed'\n   *\n   * @param {string} actionId ID assigned to forwarded action in Forwarder\n   * @param {string} blockNumber The number of the block from which this event was emitted\n   * @param {string} status The current status of the forwarded action within the forwarder\n   * @param {string} evmScript The updated execution script\n   * @return {void}\n   */\n  updateForwardedAction (actionId, blockNumber, evmScript, status) {\n    return this.rpc.send(\n      'update_forwarded_action',\n      [actionId, blockNumber, evmScript, status]\n    )\n  }\n\n  /**\n   * Subscribes to forwarded actions that target this app and emits them like contract events\n   *\n   * @return {Observable} An [RxJS observable](http://reactivex.io/rxjs/class/es6/Observable.js~Observable.html) that emits an array of forwarded action objects\n   */\n  getForwardedActions () {\n    return this.rpc.sendAndObserveResponses(\n      'get_forwarded_actions'\n    ).pipe(\n      pluck('result')\n    )\n  }\n}\n\n/**\n * This class is used to communicate with the wrapper in which the app is run.\n *\n * Every method in this class sends an RPC message to the wrapper through the provider.\n */\nexport default class AragonApp {\n  /**\n   * Create a connected AragonApp instance.\n   *\n   * @param {Object} [provider=MessagePortMessage] The provider used to send and receive messages to and from the wrapper.\n   */\n  constructor (provider = new providers.MessagePortMessage()) {\n    return new Proxy(\n      new AppProxy(provider),\n      AppProxyHandler\n    )\n  }\n}\n\n// Re-export the Aragon RPC providers\nexport { providers }\n"],"file":"index.js"}